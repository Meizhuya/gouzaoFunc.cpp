#include<iostream>
using namespace std;
#include<string>

//构造函数的分类及调用
//分类
// 按照参数分类  无参构造（默认构造）和有参构造

class Person
{
public:
	//构造函数
	Person()
	{
		cout << "Person的构造函数调用" << endl;
	}
	Person( int a)
	{
		cout << "Person的有参构造函数调用" << endl;
	}
	//拷贝构造函数
	Person(const Person &p)
	{
		cout << "Person的拷贝构造函数调用" << endl;
	}

	~Person()
	{
		cout << "Person的析构函数调用" << endl;
	}

};

//调用
void test01()
{
//1.括号法
	/* Person p1;//默认构造函数调用//使用时不能加括号 
	Person p2(10); //有参构造函数调用
	Person p3(p2);//拷贝构造函数调用*/
//2.显示法
	/*Person p1;//默认
	Person p2 = Person(10);//有参
	Person p3 = Person(p2);//拷贝构造*/
//3.隐式转换法
	//有参构造
	Person p4 = 10;//相当于 写成 Person p4= Person（10）
	//拷贝构造
	Person p5 = p4;

}

int main()
{

	test01();

	system("pause");
	return 0;

}

#include<iostream>
using namespace std;
#include<string>
//拷贝函数调用时机
// 1.使用一个已经创建完毕的对象来初始化一个新的对象
//2.值传递的方式给函数参数传值
//3.值传递返回局部对象

class Person
{
public:

	Person()
	{
		cout << "Person默认构造函数调用" << endl;
	}
	Person(int age)
	{
		cout << "Person有参构造函数调用" << endl;
		m_Age = age;
	}
		
	Person(const Person& p)
	{
		cout << "Person拷贝构造函数调用" << endl;
		m_Age = p.m_Age;
	
	}
	~Person()
	{
		cout << "Person析构造函数调用" << endl;
	
	}
	int m_Age;
};

void test01()
{
	Person p1(20);
	Person p2(p1);

	cout << "p2的年龄为：" << p2.m_Age << endl;
}
void doWork(Person p)
{
}
void test02()
{
	Person p;
	doWork(p);
}

int main()
{
	//test01();
	test02();

	system("pause");
	return 0;

}
